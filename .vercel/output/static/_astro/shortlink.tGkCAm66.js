const l=e=>e&&typeof e=="object"&&Array.isArray(e.errors)?e.errors.every(t=>typeof t.type=="string"&&typeof t.value=="string"&&typeof t.msg=="string"&&typeof t.path=="string"&&typeof t.location=="string"):!1,d=e=>!!(e&&typeof e=="object"&&typeof e.msg=="string"),c="",f=async(e,t)=>{const{user:r}=JSON.parse(document.cookie.split("=")[1]);(!e.trim()||!t.trim())&&alert("Title and URL fields are required. Please try again.");try{new URL(t)}catch{alert("URL is not valid!")}new RegExp("[a-zA-Z0-9_]+").test(e)||alert("Title is not valid!");const a=await(await fetch(c+"api/links",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:e,url:t,userId:r._id})})).json();if(l(a)){let s="Something went wrong!";a.errors.forEach(o=>{if(o.msg===`The title: ${e} already exists in the database`){s=o.msg;return}}),alert(s);return}alert(a.title+" has been created successfully!"),location.href="/me"},g=async(e,t,r)=>{(!t.trim()||!r.trim())&&alert("Title and URL fields are required. Please try again.");try{new URL(r)}catch{alert("URL is not valid!")}new RegExp("[a-zA-Z0-9_]+").test(t)||alert("Title is not valid!");const a=await(await fetch(c+"api/links/"+e,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({_id:e,title:t,url:r})})).json();if(l(a)){let s="Something went wrong!";a.errors.forEach(o=>{if(o.msg===`The title: ${t} already exists in the database`){s=o.msg;return}}),alert(s);return}alert(a.title+" has been updated successfully!"),location.href="/me"},p=async(e,t)=>{const n=await(await fetch(c+"api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pass:e,email:t})})).json();if(d(n)){alert("User/Password invalid!");return}const i=new Date;i.setTime(i.getTime()+36e5);const a="expires="+i.toUTCString();document.cookie="user="+JSON.stringify(n)+";"+a+";path=/",location.href="/"},y=async(e,t,r)=>{if(!e.trim()||!t.trim()||!r.trim()){alert("Name, email and password fields are required. Please try again.");return}if(!/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[=+-@#$%&])(?=.{8,})/.test(r)){alert("The password must have at least 1 uppercase letter, at least 1 digit, at least 1 non-alphanumeric character, and a minimum length of 8.");return}const a=await(await fetch(c+"api/users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pass:r,name:e,email:t})})).json();if(l(a)){alert(a.errors[0]);return}alert("Your account has be created!"),location.href="/me"};export{f as c,p as l,y as r,g as u};
